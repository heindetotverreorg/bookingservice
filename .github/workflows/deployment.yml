name: Deploy bookingservice to pi
on: 
  push: 
    branches: 
      - main
  workflow_dispatch:
env:
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REPO: https://github.com/${{ github.repository }}.git
  IMAGE_PATH: ${{ secrets.DOCKER_NAMESPACE }}/bookingservice:latest
  IMAGE_NAME: bookingservice
  USER_NAME: ${{ secrets.DOCKER_NAMESPACE }}
jobs: 
  unit-test: 
    name: Unit tests
    runs-on: self-hosted
    steps: 
      - name: Get code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Test
        run: npm test
  build-push-image:
    needs: unit-test
    name: Build and push image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        # no need to setup ssh because the GitHub runner runs on the same domain as the server
        # checkout the code to the server
        run: |
          ssh ${{ env.USER_NAME }}@${{ secrets.SERVER_HOST }} -p 22 -o ConnectTimeout="10" -o StrictHostKeyChecking=no <<'ENDSSH'
          rm -rf ${{ env.IMAGE_NAME }}
          mkdir -p ~/${{ env.IMAGE_NAME }}
          cd ~/${{ env.IMAGE_NAME }}
          git init
          git remote add origin ${{ env.REPO }}
          git fetch origin
          git checkout main
          ENDSSH
      - name: Build and Publish image
      # build the image and push it to the docker registry
        run: |
          ssh ${{ env.USER_NAME }}@${{ secrets.SERVER_HOST }} -p 22 -o ConnectTimeout="10" -o StrictHostKeyChecking=no <<'ENDSSH'
          cd ~/${{ env.IMAGE_NAME }}
          docker build -t ${{ env.IMAGE_PATH }} .
          docker login -u ${{ github.actor }} -p ${{ env.DOCKER_PASSWORD }}
          docker push ${{ env.IMAGE_PATH }}
          ENDSSH
  restart-service:
    needs: build-push-image
    name: Restart the docker service
    runs-on: self-hosted
    steps:
      - name: Restart service
      # restart the docker service
        run: |
          ssh ${{ env.USER_NAME }}@${{ secrets.SERVER_HOST }} -p 22 -o ConnectTimeout="10" -o StrictHostKeyChecking=no <<'ENDSSH'
          cd ~/${{ env.IMAGE_NAME }}
          docker compose down
          docker system prune -af
          docker compose up -d
          rm -rf *
          ENDSSH